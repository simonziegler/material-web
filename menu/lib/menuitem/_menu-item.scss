//
// Copyright 2022 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:map';
@use 'sass:string';

@use '../../../list/list';
@use '../../../ripple/ripple';
@use '../../../list/list-item';
@use '../../../list/list-divider';
@use '../../../sass/resolvers';
@use '../../../sass/theme';
@use '../../../tokens';
@use '../../../sass/map-ext';
@use '../../../elevation/lib/elevation';
@use '../../../focus/focus-ring';

$_custom-property-prefix: 'menu';

@mixin theme($theme) {
  $reference: resolve-tokens(tokens.md-comp-menu-values());
  $theme: resolve-tokens($theme);
  $theme: theme.validate-theme($reference, $theme);
  $theme: theme.create-theme-vars($theme, $_custom-property-prefix);

  @include theme.emit-theme-vars($theme);
}

@mixin styles() {
  :host([selected]) .list-item {
    background-color: var(--_list-item-selected-container-color);
  }

  /*
    Set the ripple opacity to 0 if there is a submenu that is hovered.
  */
  .list-item:has(.submenu:hover) {
    /*
      Have to use ripple theme directly because :has selector in this case does
      not work in this case with the :has selector, thus we cannot override the
      custom props set in :host
    */
    @include ripple.theme(
      (
        hover-state-layer-opacity: 0,
      )
    );
  }
}

@function copy-key($tokens, $name, $new-name) {
  $value: map.get($tokens, $name);
  @if not map.has-key($tokens, $name) {
    @error "Key " + $name + " does not exist in map " + $tokens;
  }
  @return map.set($tokens, $new-name, $value);
}

@function string-replace($string, $pattern, $replacement) {
  $pattern-index: string.index($string, $pattern);
  @if not $pattern-index {
    @return $string;
  }

  $before: string.slice($string, 1, $pattern-index - 1);
  $after: string.slice($string, string.length($pattern) + $pattern-index);

  @return $before + $replacement + $after;
}

@function resolve-tokens($tokens) {
  $list-item-tokens: ();
  $tokens: copy-key(
    $tokens,
    list-item-container-height,
    list-item-one-line-container-height
  );

  @each $token, $value in $tokens {
    $index: string.index($token, list-item);
    $with-leading-index: string.index($token, list-item-with-leading-icon-);
    $with-trailing-index: string.index($token, list-item-with-trailing-icon-);

    @if $index {
      // Replace list-item-with-leading-icon-focus-icon-color
      //    with list-item-focus-leading-icon-icon-color
      // and replace list-item-with-leading-icon-leading-icon-size
      //    with list-item-leading-icon-size
      @if $with-leading-index {
        $token: string-replace(
          $token,
          list-item-with-leading-icon-,
          list-item-
        );
        $leading-index: string.index($token, -leading-);
        @if not $leading-index {
          $token: string-replace($token, -icon-, -leading-icon-icon-);
        }
      }

      // Replace list-item-with-trailing-icon-focus-icon-color
      //    with list-item-focus-trailing-icon-icon-color
      // and replace list-item-with-trailing-icon-trailing-icon-size
      //        with list-item-trailing-icon-size
      @if $with-trailing-index {
        $token: string-replace(
          $token,
          list-item-with-trailing-icon-,
          list-item-
        );
        $trailing-index: string.index($token, -trailing-);
        @if not $trailing-index {
          $token: string-replace($token, -icon-, -trailing-icon-icon-);
        }
      }

      $list-item-tokens: map.set($list-item-tokens, $token, $value);
    }
  }

  @return $list-item-tokens;
}

@mixin private-props() {
  $tokens: resolve-tokens(tokens.md-comp-menu-values());
  $tokens: theme.create-theme-vars($tokens, menu);

  :host {
    @each $token, $value in $tokens {
      --_#{$token}: #{$value};
    }
  }
}
